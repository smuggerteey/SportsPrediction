# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aY4ESfaW1f6gcQ7EALdYKipqliAbkUHq
"""
import requests

def load_model_from_github(file_url):
    try:
        response = requests.get(file_url)
        if response.status_code == 200:
            model_content = response.content
            # Process the model content as needed
            # For example, load the model using pickle
            model = pickle.loads(model_content)
            return model
        else:
            st.error(f"Failed to retrieve the model file. Status Code: {response.status_code}")
    except Exception as e:
        st.error(f"Error loading the model: {str(e)}")

def main():
    # Replace `raw_file_url` with the actual URL of the raw file on GitHub
    raw_file_url = "https://github.com/smuggerteey/SportsPredictions/blob/main/GBRtrained_model.pkl"
    model = load_model_from_github(raw_file_url)
    
    if model:
        st.title("Player Rating Prediction")

    features_list = ['potential', 'movement_reactions', 'passing', 'mentality_composure', 'dribbling',
                     'release_clause_eur', 'wage_eur', 'value_eur', 'power_shot_power', 'physic', 'mentality_vision',
                     'attacking_short_passing', 'shooting', 'goalkeeping_speed', 'skill_long_passing', 'age',
                     'skill_ball_control', 'international_reputation', 'league_level', 'nation_team_id', 'sofifa_id']

    st.write("Enter 10 features from the list below to continue:")
    selected_features = st.multiselect("Features", features_list, key="features", default=[])

    if len(selected_features) == 10:
        feature_values = []

        for feature in selected_features:
            value = st.text_input(f"Enter value for {feature}", key=feature)
            feature_values.append(value)

        if st.button("Predict"):
            # Call your prediction function with the feature values and display the result
            prediction = predict_rating(feature_values)
            st.success(f"The predicted rating is: {prediction}")

    else:
        st.warning("Please select exactly 10 features.")

import random

def predict_rating(features):
    rating = 80  # Default rating if no conditions are met
    return rating
if _name_ == '_main_':
    main()
